一、术语“流”想要表达的是，随着时间的推移，字符是顺序生成或消耗的
二、缓冲区：内存空间的一部分。也就是说，在内存中预留了一定的存储空间，这些存储空间用来缓冲输入或者输出的数据，分为输入缓冲区和输出缓冲区。
三、数据从缓冲区写入输入或输出流，刷新缓冲区操作保证程序所产生的所有输出都真正写入输出流中
四、刷新缓冲区相关操作：
	endl // endl是用来 完成换行并刷新缓冲区的

	flush // flush是用来 直接刷新缓冲区的

	ends // ends 则在输入后加上一个空字符，然后再刷新缓冲区

	cout << unitbuf // 这里unitbuf 不执行任何动作，而是设置这个cout输出流 在接下来的每次操作之后都进行刷新缓冲区

	cout << nounitbuf // 这里nounitbuf则是让cout 回到正常的缓冲方式
五、windows平台下使用控制台cout直接输出，不管有没有执行刷新缓冲区，每执行一次输出都会直接将数据打印在控制台。说明windows下默认cout是无缓冲的，Linux则有缓冲。
六、看如下代码（文件流和缓冲区）：
	#include <fstream>
	#include <iostream>
	#include <string>
	using namespace std;
 
	int main()
	{
		ofstream out_file("test.txt", ofstream::trunc); //这里创建一个文件用来输出写入，以trunc的方式打开，每次打开都会清空文件里的数据
 		//在for循环执行完之前，数据一直存放在缓冲区，而没有真正写入到输出流，因此在循环执行完之前退出程序，“test.txt”是空的
		for (size_t i = 0; i != 5; ++i)
		{
		string t;
		cin >> t;
		out_file << t; //这里并没有设置什么操纵符来刷新缓冲区  假如改为out_file << t << endl; 
			     //那么每执行完这句话都会将缓冲区的数据写入到输出流，在循环执行完之前退出程序，文件中也会有数据
		}
 
		return 0;
	}
